version: '3'

services:
  mongodb:
    image: mongo
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    restart: always

  frontfacingserver_webapp:
    build:  .
    container_name: webapp
    ports:
      - 8443:443
      - 8080:80
      - 4200
      - 5000:5000
    command: >
     bash -c "service nginx start &&
      cd /ffs && /venv/bin/python app.py &
      cd /fe && npm start"
    depends_on:
      - mongodb
    volumes:
      - dataset:/ffs/dataset
      - ./nginx/snippets/self-signed.conf:/etc/nginx/snippets/self-signed.conf
      - ./nginx/snippets/ssl-params.conf:/etc/nginx/snippets/ssl-params.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/proxy_params:/etc/nginx/proxy_params
      - ./ssl/private/nginx-selfsigned.key:/etc/ssl/private/nginx-selfsigned.key
      - ./ssl/certs/nginx-selfsigned.crt:/etc/ssl/certs/nginx-selfsigned.crt
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem
    restart: always

  worker1:
    build: ./cpp-invoker/.
    container_name: worker1
    ports:
      - 5000
    entrypoint: >
      bash -c "cd /invoker && /venv/bin/python app.py worker1:5000"
    volumes:
      - dataset:/invoker/dataset
      - running-worker1:/invoker/running
      - ./default-cpp-param.txt:/invoker/default.txt
      - ./config-cpp-invoker.json:/invoker/config.json
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'

  worker2:
    build: ./cpp-invoker/.
    container_name: worker2
    ports:
      - 5000
    entrypoint: >
      bash -c "cd /invoker && /venv/bin/python app.py worker2:5000"
    volumes:
      - dataset:/invoker/dataset
      - running-worker2:/invoker/running
      - ./default-cpp-param.txt:/invoker/default.txt
      - ./config-cpp-invoker.json:/invoker/config.json
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'

  worker3:
    build: ./cpp-invoker/.
    container_name: worker3
    ports:
      - 5000
    entrypoint: >
      bash -c "cd /invoker && /venv/bin/python app.py worker3:5000"
    volumes:
      - dataset:/invoker/dataset
      - running-worker3:/invoker/running
      - ./default-cpp-param.txt:/invoker/default.txt
      - ./config-cpp-invoker.json:/invoker/config.json
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'


  haproxy:
    image: haproxy
    container_name: haproxy
    depends_on:
      - worker1
      - worker2
      - worker3
    ports:
      - 8090:80
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    restart: always

volumes:
  dataset:
  mongo_data:
  running-worker1:
  running-worker2:
  running-worker3:
